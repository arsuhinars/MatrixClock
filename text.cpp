
#include "web_server.h"
#include "display.h"
#include "effects.h"
#include "text.h"

//Фон для бегущей строки
uint8_t runningLineBg = 0;

//Скорость бегущей строки
extern uint8_t runningLineSpeed = 125;

//Текущий текст, выводимый в бегущей строке
String runningLineText = "Big brown fox jumps over the lazy dog.";

//Массив символов шрифта размером 5x7
const uint8_t font_5x7[][7] PROGMEM = {
  {
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000
  },
  //!
  {
    0b1,
    0b1,
    0b1,
    0b1,
    0b1,
    0b0,
    001
  },
  //"
  {
    0b101,
    0b101,
    0b000,
    0b000,
    0b000,
    0b000,
    0b000
  },
  //#
  {
    0b01010,
    0b01010,
    0b11111,
    0b01010,
    0b11111,
    0b01010,
    0b01010
  },
  //$
  {
    0b00100,
    0b01111,
    0b10100,
    0b01110,
    0b00101,
    0b11110,
    0b00100
  },
  //%
  {
    0b11001,
    0b11001,
    0b00010,
    0b00100,
    0b01000,
    0b10011,
    0b10011
  },
  //&
  {
    0b01100,
    0b10010,
    0b10010,
    0b01100,
    0b10101,
    0b10010,
    0b01101
  },
  //'
  {
    0b1,
    0b1,
    0b0,
    0b0,
    0b0,
    0b0,
    0b0
  },
  //(
  {
    0b01,
    0b10,
    0b10,
    0b10,
    0b10,
    0b10,
    0b01
  },
  //)
  {
    0b10,
    0b01,
    0b01,
    0b01,
    0b01,
    0b01,
    0b10
  },
  //*
  {
    0b00100,
    0b10101,
    0b01110,
    0b01110,
    0b10101,
    0b00100,
    0b00000
  },
  //+
  {
    0b00000,
    0b00100,
    0b00100,
    0b11111,
    0b00100,
    0b00100,
    0b00000
  },
  //,
  {
    0b0,
    0b0,
    0b0,
    0b0,
    0b0,
    0b1,
    0b1
  },
  //-
  {
    0b00000,
    0b00000,
    0b00000,
    0b11111,
    0b00000,
    0b00000,
    0b00000
  },
  //.
  {
    0b0,
    0b0,
    0b0,
    0b0,
    0b0,
    0b0,
    0b1
  },
  // /
  {
    0b00001,
    0b00010,
    0b00010,
    0b00100,
    0b01000,
    0b01000,
    0b10000
  },
  //0
  {
    0b11111,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b11111
  },
  //1
  {
    0b00100,
    0b01100,
    0b10100,
    0b00100,
    0b00100,
    0b00100,
    0b00100
  },
  //2
  {
    0b11110,
    0b00001,
    0b00001,
    0b00110,
    0b01000,
    0b10000,
    0b11111
  },
  //3
  {
    0b11110,
    0b00001,
    0b00001,
    0b01110,
    0b00001,
    0b00001,
    0b11110
  },
  //4
  {
    0b00010,
    0b00110,
    0b01010,
    0b10010,
    0b11111,
    0b00010,
    0b00010
  },
  //5
  {
    0b11111,
    0b10000,
    0b10000,
    0b11110,
    0b00001,
    0b00001,
    0b11110
  },
  //6
  {
    0b01111,
    0b10000,
    0b10000,
    0b11110,
    0b10001,
    0b10001,
    0b01110
  },
  //7
  {
    0b11111,
    0b00001,
    0b00010,
    0b00010,
    0b00100,
    0b00100,
    0b00100
  },
  //8
  {
    0b01110,
    0b10001,
    0b10001,
    0b01110,
    0b10001,
    0b10001,
    0b01110
  },
  //9
  {
    0b01110,
    0b10001,
    0b10001,
    0b01111,
    0b00001,
    0b00001,
    0b11110
  },
  //:
  {
    0b0,
    0b1,
    0b0,
    0b0,
    0b0,
    0b1,
    0b0
  },
  //;
  {
    0b0,
    0b1,
    0b0,
    0b0,
    0b0,
    0b1,
    0b1
  },
  //<
  {
    0b00010,
    0b00100,
    0b01000,
    0b10000,
    0b01000,
    0b00100,
    0b00010
  },
  //=
  {
    0b00000,
    0b00000,
    0b11111,
    0b00000,
    0b11111,
    0b00000,
    0b00000
  },
  //>
  {
    0b01000,
    0b00100,
    0b00010,
    0b00001,
    0b00010,
    0b00100,
    0b01000
  },
  //?
  {
    0b01110,
    0b10001,
    0b00010,
    0b00100,
    0b00100,
    0b00000,
    0b00100
  },
  //@
  {
    0b01110,
    0b10001,
    0b10011,
    0b10101,
    0b10010,
    0b10000,
    0b01110
  },
  //A
  {
    0b00100,
    0b01010,
    0b01010,
    0b11111,
    0b10001,
    0b10001,
    0b10001
  },
  //B
  {
    0b11110,
    0b10001,
    0b10001,
    0b11110,
    0b10001,
    0b10001,
    0b11110
  },
  //C
  {
    0b01111,
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b01111
  },
  //D
  {
    0b11110,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b11110
  },
  //E
  {
    0b11111,
    0b10000,
    0b10000,
    0b11110,
    0b10000,
    0b10000,
    0b11111
  },
  //F
  {
    0b11111,
    0b10000,
    0b10000,
    0b11110,
    0b10000,
    0b10000,
    0b10000
  },
  //G
  {
    0b01111,
    0b10000,
    0b10000,
    0b10110,
    0b10001,
    0b10001,
    0b01110
  },
  //H
  {
    0b10001,
    0b10001,
    0b10001,
    0b11111,
    0b10001,
    0b10001,
    0b10001
  },
  //I
  {
    0b111,
    0b010,
    0b010,
    0b010,
    0b010,
    0b010,
    0b111
  },
  //J
  {
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b10001,
    0b10001,
    0b01110
  },
  //K
  {
    0b10001,
    0b10010,
    0b10100,
    0b11000,
    0b10100,
    0b10010,
    0b10001
  },
  //L
  {
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b11111
  },
  //M
  {
    0b10001,
    0b11011,
    0b10101,
    0b10001,
    0b10001,
    0b10001,
    0b10001
  },
  //N
  {
    0b10001,
    0b10001,
    0b11001,
    0b10101,
    0b10011,
    0b10001,
    0b10001
  },
  //O
  {
    0b01110,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b01110
  },
  //P
  {
    0b11110,
    0b10001,
    0b10001,
    0b11110,
    0b10000,
    0b10000,
    0b10000
  },
  //Q
  {
    0b01110,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10010,
    0b01101
  },
  //R
  {
    0b11110,
    0b10001,
    0b10001,
    0b10010,
    0b11100,
    0b10010,
    0b10001
  },
  //S
  {
    0b01111,
    0b10000,
    0b10000,
    0b01110,
    0b00001,
    0b00001,
    0b11110
  },
  //T
  {
    0b11111,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100
  },
  //U
  {
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b01110
  },
  //V
  {
    0b10001,
    0b10001,
    0b10001,
    0b01010,
    0b01010,
    0b01010,
    0b00100
  },
  //W
  {
    0b00000,
    0b10001,
    0b10001,
    0b10001,
    0b10101,
    0b10101,
    0b01010
  },
  //X
  {
    0b10001,
    0b10001,
    0b01010,
    0b00100,
    0b01010,
    0b10001,
    0b10001
  },
  //Y
  {
    0b10001,
    0b10001,
    0b01111,
    0b00001,
    0b00001,
    0b00001,
    0b11110
  },
  //Z
  {
    0b11111,
    0b00001,
    0b00010,
    0b00100,
    0b01000,
    0b10000,
    0b11111
  },
  //[
  {
    0b11,
    0b10,
    0b10,
    0b10,
    0b10,
    0b10,
    0b11
  },
  //
  {
    0b10000,
    0b01000,
    0b01000,
    0b00100,
    0b00010,
    0b00010,
    0b00001
  },
  //]
  {
    0b11,
    0b01,
    0b01,
    0b01,
    0b01,
    0b01,
    0b11
  },
  //^
  {
    0b00100,
    0b01010,
    0b10001,
    0b00000,
    0b00000,
    0b00000,
    0b00000
  },
  //_
  {
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b11111
  },
  //`
  {
    0b10,
    0b01,
    0b00,
    0b00,
    0b00,
    0b00,
    0b00
  },
  //a
  {
    0b00000,
    0b00000,
    0b01101,
    0b10011,
    0b10001,
    0b10011,
    0b01101
  },
  //b
  {
    0b10000,
    0b10000,
    0b10000,
    0b11110,
    0b10001,
    0b10001,
    0b01110
  },
  //c
  {
    0b0000,
    0b0000,
    0b0111,
    0b1000,
    0b1000,
    0b1000,
    0b0111
  },
  //d
  {
    0b00001,
    0b00001,
    0b00001,
    0b01111,
    0b10001,
    0b10001,
    0b01110
  },
  //e
  {
    0b00000,
    0b01110,
    0b10001,
    0b10001,
    0b11110,
    0b10000,
    0b01111
  },
  //f
  {
    0b0111,
    0b1000,
    0b1000,
    0b1110,
    0b1000,
    0b1000,
    0b1000
  },
  //g
  {
    0b00000,
    0b01110,
    0b10001,
    0b10001,
    0b01111,
    0b00001,
    0b01110
  },
  //h
  {
    0b10000,
    0b10000,
    0b10000,
    0b11110,
    0b10001,
    0b10001,
    0b10001
  },
  //i
  {
    0b0,
    0b1,
    0b0,
    0b1,
    0b1,
    0b1,
    0b1
  },
  //j
  {
    0b01,
    0b00,
    0b01,
    0b01,
    0b01,
    0b01,
    0b10
  },
  //k
  {
    0b1000,
    0b1000,
    0b1001,
    0b1010,
    0b1100,
    0b1010,
    0b1001
  },
  //l
  {
    0b1,
    0b1,
    0b1,
    0b1,
    0b1,
    0b1,
    0b1
  },
  //m
  {
    0b00000,
    0b00000,
    0b00000,
    0b01010,
    0b10101,
    0b10101,
    0b10101
  },
  //n
  {
    0b00000,
    0b00000,
    0b11110,
    0b10001,
    0b10001,
    0b10001,
    0b10001
  },
  //o
  {
    0b00000,
    0b01110,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b01110
  },
  //p
  {
    0b0000,
    0b1110,
    0b1001,
    0b1001,
    0b1110,
    0b1000,
    0b1000
  },
  //q
  {
    0b0110,
    0b1001,
    0b1001,
    0b1001,
    0b0111,
    0b0001,
    0b0001
  },
  //r
  {
    0b0000,
    0b0000,
    0b0111,
    0b1000,
    0b1000,
    0b1000,
    0b1000
  },
  //s
  {
    0b0000,
    0b0000,
    0b0111,
    0b1000,
    0b0110,
    0b0001,
    0b1110
  },
  //t
  {
    0b000,
    0b010,
    0b111,
    0b010,
    0b010,
    0b010,
    0b001
  },
  //u
  {
    0b0000,
    0b0000,
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b0110
  },
  //v
  {
    0b00000,
    0b00000,
    0b10001,
    0b10001,
    0b10001,
    0b01010,
    0b00100
  },
  //w
  {
    0b00000,
    0b00000,
    0b10001,
    0b10001,
    0b10001,
    0b10101,
    0b01010
  },
  //x
  {
    0b00000,
    0b00000,
    0b10001,
    0b01010,
    0b00100,
    0b01010,
    0b10001
  },
  //y
  {
    0b0000,
    0b1001,
    0b1001,
    0b1001,
    0b0111,
    0b0001,
    0b1110
  },
  //z
  {
    0b0000,
    0b1111,
    0b0001,
    0b0010,
    0b0100,
    0b1000,
    0b1111
  },
  {
    0b001,
    0b010,
    0b010,
    0b100,
    0b010,
    0b010,
    0b001
  },
  //|
  {
    0b1,
    0b1,
    0b1,
    0b1,
    0b1,
    0b1,
    0b1
  },
  {
    0b100,
    0b010,
    0b010,
    0b001,
    0b010,
    0b010,
    0b100
  },
  {
    0b00000,
    0b00000,
    0b01001,
    0b10101,
    0b10010,
    0b00000,
    0b00000
  }
};
const uint8_t symbolLength[] PROGMEM = {
  3, 1, 3, 5, 5, 5, 5, 1, 2, 2, 5, 5, 1, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 2, 5, 2, 5, 5, 2, 5, 5, 4, 5, 5, 4, 5, 5, 1, 2, 4, 1, 5, 5, 5, 4, 4, 4, 4,
  3, 4, 5, 5, 5, 4, 4, 3, 1, 3, 5
};

//Маска текущего текста на экране
bool textMask[WIDTH * HEIGHT];

/* Функция отрисовки символа в буфер для маски */
void drawChar(char symbol, int8_t x, int8_t y) {
  if (symbol < 32 || symbol > 126)
    return;
  symbol -= 32;
  for (int8_t y1 = 0; y1 < 7; y1++) {
    uint8_t stroke = pgm_read_byte(&font_5x7[symbol][y1]);
    uint8_t length = pgm_read_byte(&symbolLength[symbol]);
    uint8_t checkBit = 1 << (length - 1);
    for (int8_t x1 = 0; x1 < length; x1++) {
      if (x + x1 >= 0 && y + y1 >= 0 && x + x1 < WIDTH && y + y1 < HEIGHT)
        textMask[(x + x1) + (y + y1) * WIDTH] = (stroke << x1) & checkBit;
    }
  }
}

/* Функция отрисовки текста в точке (x, y) */
void drawText(String &text, int16_t x, uint8_t y) {
  uint8_t length = text.length();
  int16_t charX = x;
  for (uint8_t i = 0; i < length; i++) {
    if (charX + 5 > 0) {
      if (charX >= WIDTH)
        break;
      drawChar(text[i], charX, y);
    }
    charX += pgm_read_byte(&symbolLength[text[i] - 32]) + 1;
  }
}

/* Функция расчета длины текста на экране */
uint16_t calcTextLength(String &text) {
  uint8_t strLength = text.length();
  uint16_t textLength = 0;
  for (uint8_t i = 0; i < strLength; i++)
    textLength += pgm_read_byte(&symbolLength[text[i] - 32]) + 1;
  return textLength;
}

/* Функция применения маски текста на текущем фоне */
void applyTextMask() {
  for (uint8_t x = 0; x < WIDTH; x++) {
    for (uint8_t y = 0; y < HEIGHT; y++) {
      uint8_t i = x + y * WIDTH;
      if (!textMask[i])
        setPixel(x, y, CRGB::Black);
      textMask[i] = false;
    }
  }
}

/* Функция обновления режима бегущей строки */
void updateRunningLine() {
  //Текущее смещение строки
  static int16_t lineX = -WIDTH;
  //Вычисляем длину текущего текста
  uint16_t textLength = calcTextLength(runningLineText);

  drawEffect(backgroundEffects[runningLineBg]);
  drawText(runningLineText, -lineX, 1);
  applyTextMask();

  static unsigned long timer = 0;
  if (millis() - timer > scale8(490, 255 - runningLineSpeed) + 10) {
    if (lineX >= textLength)
      lineX = -WIDTH;
    lineX++;
    timer = millis();
  }
}
